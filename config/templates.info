; This file defines some templates to be used in config.info
; To use it, #include "examples/templates.info" in the templates section
; of your config.info


; Xonotic integration
Xonotic
{
    ; Parameter declarations
    @name                               ; Xonotic connection name
    @server     localhost:26000         ; Xonotic server
    @rcon_password
    @rcon_secure 0
    @say_as     sv_adminnick            ; Say option
                                        ; Builtin values include: modpack, sv_adminnick.
                                        ; You can also use explicit commands
    @stats                              ; Stats URL

    @irc        irc_quakenet            ; IRC connection (defaults to irc_quakenet)
    @channel                            ; IRC channel name
    @prefix                             ; Prefix shown on IRC
    @admin      admin                   ; User group required to trigger admin functionality
    @show_irc_events    1               ; Show to xonotic players IRC join/parts and similar
    @show_connection_events 1           ; Shows when the server connected or disconnected

    type        Group

    ; Sets up a xonotic connection
    Connection
    {
        protocol        xonotic         ; required (fixed string)
        name            @name
        server          @server
        rcon_password   @rcon_password
        rcon_secure     @rcon_secure
        say_as          @say_as
    }

    ; IRC showing information on the Xonotic server
    Group {
        source          @irc
        channels        @channel
        monitored       @name
        trigger         @prefix
        prefix          @prefix
        help            "Integration with the xonotic server @server"
        help_group      @irc
        direct          1

        ListPlayers                     ; "who" shows the connected players

        Group
        {
            auth        @admin
            priority    100
            XonoticStatus { public 0 }  ; "status" shows info on players and the server
            XonoticMaps                 ; "maps" shpws a list of maps (regex for admins)
            {
                regex           1
                max_print       10
            }
            XonoticKick { public 0 }    ; "kick" kiks players
            XonoticBan  { public 0 }    ; "ban" manages bans
        }

        Group                           ; "server" shows server information
        {
            trigger "server"
            help "Shows server information"
            MonitorServerStatus         ; "server status" shows whether the server is connected
            MonitorReply                ; "server ip" shows the IP address and port
            {
                trigger "ip"
                reply   "$sv_server"
                help    "Shows IP address and port"
            }
            Reply                       ; "server stats" shows the stats URL
            {
                trigger "stats"
                reply   "@stats "
                help    "Shows the stats URL"
            }
            MonitorReply                ; "server game" shows gametype and map
            {
                trigger "game"
                reply   "Playing $(dark_cyan)$gametype$(-) on $(1)$map"
                help    "Shows the current gametype and map"
            }
            MonitorReply                ; "server" (no parameter) shows the host name
            {
                reply       "$hostname"
            }
        }
        XonoticMaps                     ; "maps" shpws a list of maps
    }

    ; IRC to Xonotic
    Bridge
    {
        source          @irc
        channels        @channel
        destination     @name
        prefix          [IRC]
        priority        0

        IfSet                           ; Shows join/parts and similar
        {
            value               @show_irc_events
            Group {
                action          1
                discard_self    1

                JoinMessage { message "has joined" }
                PartMessage { message "has left" }
                KickMessage { message "has kicked $kicked!" }
                RenameMessage { message "changed name to $(7)$message" }
            }
        }

        Group {
            trigger         @prefix
            help            "Integration with the xonotic server @server"
            help_group      @irc

            Group
            {
                direct      1
                auth        @admin

                RconCommand endmatch    ; "endmatch" ends the current match
                RconCommand gotomap     ; "gotomap (map)" changes the map after showing the scoreboard
                RconCommand chmap       ; "chmap (map)" changes the map immediately
                RconCommand restart     ; "restart" restarts the match
                Group
                {
                    nick "[IRC] $name"
                    XonoticVCall        ; "vcall" calls a vote
                    XonoticVStop        ; "vstop" stops the vote
                }
                Connect                 ; "connect" activates the attached connection
                Disconnect              ; "disconnect" deactivates the attached connection
                Reconnect               ; "reconnect" reconnects the attached connection
            }
            Group {                     ; If you want some users to have their chat shown in rainbows
                auth rainbow
                RainbowBridgeChat
            }
            BridgeChat                  ; Sends chat
        }
    }

    ; Xonotic showing information on the IRC server
    Group
    {
        trigger         "!"
        source          @name
        help_group      @name
        direct          0
        monitored       @irc

        MonitorReply                    ; !irc shows the IRC channel
        {
            trigger "irc"
            reply   "$network ($default_server) #@channel" ; Note: the # is to escape the format ##
            help    "Shows the IRC channel"
        }
        Help                            ; !help shows help
    }

    ; Xonotic to IRC
    Bridge
    {
        source          @name
        destination     @irc
        dst_channel     @channel
        prefix          @prefix
        priority        0

        BridgeChat                      ; Sends chat
        {
            timeout     10
        }
        IfSet                           ; Shows when the server connected or disconnected
        {
            value       @show_connection_events
            ConnectionEvents
        }
        XonoticJoinPart                 ; Shows join/part messages
        XonoticMatchStart               ; Shows a message on match start
        RenameMessage                   ; Shows player name changes
        {
            message "$(4)*$(-) $name$(-) changed name to $message"
            timeout 10
        }
        XonoticMatchScore               ; Shows the score at match end
        ShowVotes                       ; Show vote calls and results
        XonoticHostError                ; Notifies admins that the server crashed
        {
            notify      @admin
            priority    100
        }
        XonoticUpdateBans
    }
}

; Basic IRC functionality
IrcCore
{
    @irc                                ; Connection to act upon
    @admin      admin                   ; User group required to trigger admin functionality
    @direct     1                       ; Whether explicit commands must be direct
    @trigger                            ; Trigger prefix for explicit commands

    type        Group

    source      @irc
    help_group  @irc

    FilterGroup { ignore banned }       ; Ignore banned users

    Whois330                            ; Parse WHOIS reply to find logged-in users

    Ctcp                                ; Basic CTCP functionality

    Group                               ; Admin Commands
    {
        name        administration
        auth        @admin
        priority    100

        AcceptInvite                    ; Admins can INVITE the bot to a channel
        Group
        {
            direct          @direct
            priority        100

            Reconnect                   ; "reconnect" Reconnects to the IRC server
            Nick                        ; "nick (newnick)" Changes the bot nick
            Join                        ; "join #channel" Makes the bot join the channel
            Part                        ; "part [#channel]" Makes the bot leave the channel
            AdminGroup { group @admin } ; "admin" Manages the admin group
            AdminGroup { group rainbow }; "rainbow" Manages the rainbow group
            AdminGroup                  ; "banned" Manages the banned group
            {
                group  banned
                ignore owner
            }
            ServerHost                  ; "server" Shows the current IRC server
            IfSet { ; Conditional because if melanobot.sh is being used, there is a different quit handler
                key     settings.melanobot_sh
                Quit                    ; "quit" Quits the bot
            }
            Template { template MelanobotSh } ; Conditionally load handlers useful when using melanobot.sh
        }
    }

    Group                               ; Commands available to everyone
    {
        direct          @direct
        trigger         @trigger
        WhoisCheckMe                    ; "checkme" Makes the bot check if you are logged in
        License                         ; "license" Shows license info (Note: Required by the AGPL
        Help { public 0 }               ; "help" Shows help on available commands
        Help { trigger "public help" }  ; "public help" Shows help on available commands to everyone, not just the one who requested it
    }
}

; Q bot functionality
IrcQuakeNet
{
    @irc                                ; Connection to act upon
    @nick                               ; Nickname to auth as, if empty uses the bot's nick
    @password                           ; Q Password

    type        Group
    source      @irc

    ; This recognizes authed users on Quakenet automatically,
    ; For this to work, the bot needs to be authed and have at least
    ; +k on the channel it will have to join on startup
    QWhois

    ; Authenticates to Q
    IrcIdentify
    {
        nick        @nick
        password    @password
        service     Q@CServe.quakenet.org
        command     AUTH
        modes       "+x"
    }
}

; NickServ functionality
IrcNickServ
{
    @irc                                ; Connection to act upon
    @nick                               ; Nickname to auth as, if empty uses the bot's nick
    @password                           ; NickServ Password

    type        Group
    source      @irc

    ; Identifies to NickServ
    IrcIdentify
    {
        nick        @nick
        password    @password
    }
}

; Standard input actions
; Requires the Posix module to have been enabled explicitly
Stdin
{
    @name       stdin   ; Connection name
    @file               ; File to read from (defaults to stdin)
    @destination        ; Default bridged connection

    type        Group

    ; Allows to control the bot from standard input
    ; Requires the Posix module to have been enabled explicitly
    Connection
    {
        protocol        stdin
        file            @file
        name            @name
    }

    Group {
        source          @name
        help_group      @name

        Group {
            trigger     "/"
            Help                                ; /help shows available actions
            Template { template MelanobotSh }   ; Conditionally load handlers useful when using melanobot.sh
            IfSet {
                key     settings.melanobot_sh
                Quit                            ; /quit shuts down the bot
            }
        }

        ; Creates a detachable bridge to a connection
        Bridge
        {
            destination @destination
            priority    100

            Group {
                trigger         "/"
                BridgeAttach                ; "/attach connection" selects a connection to attach to
                BridgeAttachChannel         ; "/attach channel" selects a channel in the connection

                Connect                     ; /connect activates the attached connection
                Disconnect                  ; /disconnect deactivates the attached connection
                Reconnect                   ; /reconnect reconnects the attached connection
                Nick                        ; "/nick name" changes the bot name in the connection
                Join                        ; "/join channel" makes the bot join the channel
                Part                        ; "/part channel" makes the bot leave the channel
                Raw                         ; "/raw command" sends a raw command to the attached connection
                Raw { trigger "" }          ; "/(command) ..." sends a raw command to the attached connection
            }
            BridgeChat                      ; sends chat to the attached connection and channel
            {
                ignore_self     0
                from            ""
            }
        }
    }
}

; This is here to be used with melanobot.sh
; Requires the Posix module to have been enabled explicitly
MelanobotSh
{
    type                IfSet
    key                 settings.melanobot_sh
    value               1
    log_true            "$(magenta)Actions for melanobot.sh activated"

    MelanobotShAction           ; "loop" enables auto-restart
    {
        action  loop
    }
    MelanobotShAction           ; "noloop" disables auto-restart
    {
        trigger noloop
        action  quit
    }
    MelanobotShRestart          ; "restart" restarts the bot
    MelanobotShQuit             ; "quit" quits the bot
}

; This is here to be used with melanobot.sh
; Requires the Posix module to have been enabled explicitly
Pipe
{
    @file                       ; File to read from
    @name               pipe    ; Connection name

    type                IfSet
    key                 settings.melanobot_sh
    value               1
    log_true            "$(magenta)Pipe listener activated"

    Connection
    {
        protocol        stdin
        name            @name
        file            @file
    }
    Group
    {
        help_group      @name
        source          @name
        Quit
        MelanobotShRestart
    }
}


; Unvanquished integration
Unvanquished
{
    ; Parameter declarations
    @name                               ; Unvanquished connection name
    @server     localhost               ; Unvanquished server
    @rcon_password

    @irc        irc_quakenet            ; IRC connection (defaults to irc_quakenet)
    @channel                            ; IRC channel name
    @prefix                             ; Prefix shown on IRC
    @admin      admin                   ; User group required to trigger admin functionality
    @show_irc_events    1               ; Show to Unvanquished players IRC join/parts and similar
    @show_connection_events 1           ; Shows when the server connected or disconnected

    type        Group

    ; Sets up an Unvanquished connection
    Connection
    {
        protocol        unvanquished
        name            @name
        server          @server
        rcon_password   @rcon_password
    }

    ; IRC showing information on the Unvanquished server
    Group {
        source          @irc
        channels        @channel
        monitored       @name
        trigger         @prefix
        prefix          @prefix
        help            "Integration with the Unvanquished server @server"
        help_group      @irc
        direct          1

        ListPlayers                     ; "who" shows the connected players

        Group
        {
            auth        @admin
            priority    100
            UnvanquishedStatus { public 0 }  ; "status" shows info on players and the server
            UnvanquishedMaps                 ; "maps" shpws a list of maps (regex for admins)
            {
                regex           1
                max_print       10
            }
        }

        Group                           ; "server" shows server information
        {
            trigger "server"
            help "Shows server information"
            MonitorServerStatus         ; "server status" shows whether the server is connected
            MonitorReply                ; "server ip" shows the IP address and port
            {
                trigger "ip"
                reply   "unv://$server"
                help    "Shows IP address and port"
            }
            MonitorReply                ; "server game" shows gametype and map
            {
                trigger "game"
                reply   "Playing on $(1)$map"
                help    "Shows the current map"
            }
            MonitorReply                ; "server" (no parameter) shows the host name
            {
                reply       "$hostname"
            }
            UnvanquishedMaps            ; "maps" shpws a list of maps
        }
    }

    ; IRC to Unvanquished
    Bridge
    {
        source          @irc
        channels        @channel
        destination     @name
        prefix          [IRC]
        priority        0

        IfSet                           ; Shows join/parts and similar
        {
            value               @show_irc_events
            Group {
                action          1
                discard_self    1

                JoinMessage { message "has joined" }
                PartMessage { message "has left" }
                KickMessage { message "has kicked $kicked!" }
                RenameMessage { message "changed name to $(7)$message" }
            }
        }

        Group {
            trigger         @prefix
            help            "Integration with the Unvanquished server @server"
            help_group      @irc

            Group
            {
                direct      1
                auth        @admin

                RconCommand endmatch    ; "endmatch" ends the current match
                RconCommand map         ; "map (map)" changes the map after showing the scoreboard
                RconCommand restart     ; "restart" restarts the match
                Connect                 ; "connect" activates the attached connection
                Disconnect              ; "disconnect" deactivates the attached connection
                Reconnect               ; "reconnect" reconnects the attached connection
            }
            Group {                     ; If you want some users to have their chat shown in rainbows
                auth rainbow
                RainbowBridgeChat
            }
            BridgeChat                  ; Sends chat
        }
    }

    ; Unvanquished to IRC
    Bridge
    {
        source          @name
        destination     @irc
        dst_channel     @channel
        prefix          @prefix
        priority        0

        IfSet                           ; Shows when the server connected or disconnected
        {
            value       @show_connection_events
            ConnectionEvents
        }
        JoinMessage
        {
            message "$(2)+ join$(-): $name $(1)$map$(-) [$(1)$players$(-)/$(1)$max$(-)]"
        }
        PartMessage
        {
            message "$(1)- part$(-): $name $(1)$map$(-) [$(1)$players$(-)/$(1)$max$(-)]"
        }
    }
}

; Adds text generation
; NOTE:
;   * Should be added near the end of the handler list, as it would gobble up
;     all unhandled messages
;   * It's best to add the "cannels" filter when used
;   * You can set markov_key to group different text generators
Markov
{
;     type Group

    MarkovTextGenerator

    Group
    {
        auth owner
        direct 1

        MarkovSave
        MarkovStatus
    }

    MarkovListener
}
